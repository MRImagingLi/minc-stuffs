#!/usr/bin/env python

from argparse import ArgumentParser
from scipy import ndimage
import numpy as np
import operator
from functools import reduce
from math import pow

import pyminc.volumes.factory as vf

def tfce(invol, outvol, dh=0.1, E=0.5, H=2.0, negative = False):

    # note: there are some silly state/aliasing issues lurking here,
    # e.g. we can't call outvol.loadData() here since this will destroy the result of
    # the first (positive) TFCE call which is stored in outvol.data ...
    # really the interface to the `tfce` procedure should be changed so that it returns
    # the data ...
    data = outvol.data

    # step through data with dh increments
    for h in np.arange(0, invol.data.max(), dh):
        # threshold the data with current height
        thresh = np.array( invol.data > h, "uint8")

        # connected components labelling
        l = ndimage.label(thresh)
        print("L:", l[1])
        # compute the size of each label
        sizes = np.array(ndimage.sum(thresh, l[0], list(range(l[1]+1))))
        # modulate label size by voxel volume
        sizes = sizes * reduce(operator.mul, invol.separations)
        print("sizes", sizes.shape)

        # compute TFCE
        if l[1] > 0:

            print("inside", h, l[1])

            labeled = l[0]
            mask = labeled > 0

            szs = sizes[labeled[mask]]
            update_vals = (pow(h, H) * dh) * np.power(szs, E)

            # conceptually one could write things more simply as follows:
            #update = pow(h, H) * dh * np.power(sizes[labeled], E) * mask
            #if negative:
            #    data -= update
            # but this misses the 'if labeled > 0' optimization
            # and performs lookup and exponentiation over the whole volume
            # giving ~2x slowdown; the current code seems roughly as fast
            # as the old `weave` version

            if negative:
                data[mask] -= update_vals
            else:
                data[mask] += update_vals

        print(h)
    outvol.data = data


if __name__ == "__main__":

    description = """
Applies the texture free cluster enhancement (TFCE) to a statistics image. See:
Smith and Nichols. Threshold-free cluster enhancement: addressing problems of smoothing, threshold dependence and localisation in cluster inference. NeuroImage (2009) vol. 44 (1) pp. 83-98
    """
    parser = ArgumentParser(description=description)

    parser.add_argument("-d", "--dh", dest="dh",
                        help="Increments over which to compute TFCE [default: %(default)s]",
                        type=float, default=0.1)
    parser.add_argument("-E", dest="E",
                        help="Power by which to raise the extent [default: %(default)s]",
                        type=float, default=0.5)
    parser.add_argument("-H", dest="H",
                        help="Power by which to raise the height [default: %(default)s]",
                        type=float, default=2.0)
    parser.add_argument("--pos-and-neg", dest="pos_and_neg",
                        help="Use both positive and negative data in input [default]",
                        action="store_const", const="both", default="both")
    parser.add_argument("--pos-only", dest="pos_and_neg",
                        help="Use only positive data in input",
                        action="store_const", const="pos")
    parser.add_argument("--neg-only", dest="pos_and_neg",
                        help="Use only negative data in input",
                        action="store_const", const="neg")
    parser.add_argument("invol", help="input .mnc volume")
    parser.add_argument("outvol", help="output .mnc volume")


    options = parser.parse_args()

    invol = vf.volumeFromFile(options.invol)
    outvol = vf.volumeFromInstance(invol, options.outvol, dtype='ushort')

    if options.pos_and_neg == "both" or options.pos_and_neg == "pos":
        tfce(invol, outvol, dh=options.dh, E=options.E, H=options.H)
    if options.pos_and_neg == "both" or options.pos_and_neg == "neg":
        invol.data *= -1
        tfce(invol, outvol, dh=options.dh, E=options.E, H=options.H, negative = True)

    outvol.writeFile()
    outvol.closeVolume()

