#!/usr/bin/env python

from pyminc.volumes.factory import *

from numpy import *
from scipy.stats import *
from argparse import ArgumentParser
import os.path
import sys

if __name__ == "__main__":

    parser = ArgumentParser()
    parser.add_argument("input_files", nargs="+", type=str)
    parser.add_argument("output_file", type=str)
    g = parser.add_mutually_exclusive_group()
    g.add_argument("--clobber", dest="clobber", action="store_true",
                   help="clobber output file [default = %(default)s]")
    g.add_argument("--no-clobber", dest="clobber", action="store_false",
                   help="opposite of '--clobber'")
    g.set_defaults(clobber=False)

    options = parser.parse_args()

    if not(options.clobber) and os.path.exists(options.output_file):
        sys.exit("Output file already exists; use --clobber to overwrite.")
    
    volhandles = []

    nfiles = len(options.input_files)
    for filename in options.input_files:
        volhandles.append(volumeFromFile(filename, dtype='ushort', labels=True))

    outfile = volumeFromInstance(volhandles[0], options.output_file, dtype='ushort', volumeType='ushort', labels=True)

    sliceArray = zeros( (nfiles,
                         volhandles[0].sizes[1],
                         volhandles[0].sizes[2]))
                         
    for i in range(volhandles[0].sizes[0]):
        for j in range(nfiles):
            t = volhandles[j].getHyperslab((i,0,0),
                                           (1,volhandles[0].sizes[1],
                                            volhandles[0].sizes[2]))
            t.shape = (volhandles[0].sizes[1], volhandles[0].sizes[2])
            sliceArray[j,:,:] = t
        
        outfile.data[i,:,:] = mode(sliceArray)[0]

    outfile.writeFile()
    outfile.closeVolume()

