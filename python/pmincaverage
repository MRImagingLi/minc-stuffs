#!/usr/bin/env python

from pyminc.volumes.factory import *
from numpy import *
from argparse import ArgumentParser
import os.path
import sys
import Queue

def getslice(volhandle, slice, q,nslices):
    """collects hyperslabs for a particular volume handle. Designed to
    be used with the multiprocessing module"""
    if volhandles[0].ndims == 3: #3D file
        t = volhandles[volhandle].getHyperslab((slice,0,0),
                                               (nslices,volhandles[0].sizes[1],
                                                volhandles[0].sizes[2]))
        t.shape = (nslices,volhandles[0].sizes[1], volhandles[0].sizes[2])
    elif volhandles[0].ndims == 4: #4D vector file
        t = volhandles[volhandle].getHyperslab((0, slice,0,0),
                                               (volhandles[0].sizes[0],
                                                nslices,
                                                volhandles[0].sizes[2],
                                                volhandles[0].sizes[3]))
        t.shape = (volhandles[0].sizes[0],
                   nslices,
                   volhandles[0].sizes[2],
                   volhandles[0].sizes[3])
    q.put((volhandle, t))

def getfile(q, filename):
    q.put(volumeFromFile(filename, dtype='double'))
    
if __name__ == "__main__":

    parser = ArgumentParser()
    g = parser.add_mutually_exclusive_group()
    g.add_argument("--clobber", dest="clobber",
                        action="store_true",
                        help="clobber output file")
    g.add_argument("--noclobber", dest="clobber",
                        action="store_false",
                        help="don't clobber output file (default)")
    g.set_defaults(clobber=False)
    parser.add_argument("infile", nargs="+", type=str, help="files to average")
    parser.add_argument("outfile", type=str, help="name of file to output")

    args = parser.parse_args()

    infiles     = args.infile
    nfiles      = len(infiles)
    outfilename = args.outfile

    if len(infiles) < 2:
        parser.error("Incorrect number of arguments")

    if not(args.clobber) and os.path.exists(outfilename):
        sys.exit("Output file already exists; use --clobber to overwrite.")
    
    # open all the file handles
    volhandles = [volumeFromFile(f, dtype='double') for f in infiles]

    outfile = volumeLikeFile(infiles[0], outfilename, volumeType='short')

    # create the slice array
    nslices = 10
    if volhandles[0].ndims == 3:
        sliceIndex = 0
        sliceArray = zeros( (nfiles,nslices,
                             volhandles[0].sizes[1],
                             volhandles[0].sizes[2]))
    elif volhandles[0].ndims == 4:
        sliceIndex = 1
        sliceArray = zeros( (nfiles,
                             volhandles[0].sizes[0],
                             nslices,
                             volhandles[0].sizes[2],
                             volhandles[0].sizes[3]))

    # loop over all slices
    for i in range(0,volhandles[0].sizes[sliceIndex],nslices):
        # last set might have less than n-slices - adjust.
        if (i + nslices) > volhandles[0].sizes[sliceIndex]:
            nslices = volhandles[0].sizes[sliceIndex] - i
            if volhandles[0].ndims == 3:
                sliceArray = zeros( (nfiles,nslices,
                                     volhandles[0].sizes[1],
                                     volhandles[0].sizes[2]))
            elif volhandles[0].ndims == 4:
                sliceArray = zeros( (nfiles,
                                     volhandles[0].sizes[0],
                                     nslices,
                                     volhandles[0].sizes[2],
                                     volhandles[0].sizes[3]))

        # without multiprocessing, this queueing stuff probably doesn't make sense -- simplify
        print("SLICE: %i" % i)
        q = Queue.Queue()
        for j in range(nfiles):
            t = getslice(j,i,q,nslices)

        # retrieve the data from the queue
        while not q.empty():
            ix, t = q.get()
            if volhandles[0].ndims == 3:
                sliceArray[ix,::,::,::] = t
            elif volhandles[0].ndims == 4:
                sliceArray[ix,::,::,::,::] = t

        # get each slice and create the average
        for k in range(nslices):
            if volhandles[0].ndims == 3:
                sl = sliceArray[::,k,::,::]
                m = average(sl, axis=0)
                outfile.data[i+k::] = m
            elif volhandles[0].ndims == 4:
                for vi in range(volhandles[0].sizes[0]):
                    sl = sliceArray[::,vi,k,::,::]
                    m = average(sl, axis=0)
                    outfile.data[vi,i+k,::,::] = m

    # and Bob's your uncle.
    outfile.writeFile()
    outfile.closeVolume()

