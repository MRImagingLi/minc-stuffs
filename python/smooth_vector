#!/usr/bin/env python
#
# smooth_vector.py
#
# A script to apply spline approximation to smooth each component of a
# vector image.
#
# Created Aug 26, 2004

import sys
import string
import os, tempfile
import subprocess
import re
import exceptions
from optparse import OptionParser, Option, OptionValueError

program_name = 'smooth_vector.py'

def process_volume(input, output, options):

    n = get_vector_length(input)

    working = tempfile.mktemp(".mnc")
    if options.smoothing == 'filter':
        smooth_base = [tempfile.mktemp() for i in range(n)]
        smoothed = [i + "_blur.mnc" for i in smooth_base]
    else:
        smoothed = [tempfile.mktemp(".mnc") for i in range(n)]

    for i in range(n):
        subprocess.check_call(('mincreshape -clobber -dimrange vector_dimension=%i %s %s' % (i, input, working)).split())

        if options.smoothing == 'spline':
            if options.mask:
                mask_option = '-mask %s' % options.mask
            else:
                mask_option = ''
        
                subprocess.check_call(('spline_smooth -distance %f -b_spline %s %s %s'
                                      % (options.distance, mask_option, working, smoothed[i])).split())
        else:
            subprocess.check_call(('mincblur -fwhm %f %s %s' % (options.fwhm, working, smooth_base[i])).split())

    subprocess.check_call(('mincconcat -clobber -concat_dimension vector_dimension %s %s'
                          % (string.join(smoothed), output)).split())
    subprocess.check_call(('rm -f %s %s' % (string.join(smoothed), working)).split())



def get_vector_length(input):
    if not os.path.exists(input):
        sys.exit("\nError: input file does not exist: '%s'; exiting...\n" % input)
    # sometimes the file exists, but the MINC file has not been 
    # properly written out to disk, check for this:
    output = subprocess.check_output(["mincinfo", input], stderr=subprocess.STDOUT)
    if re.search("Unable to open file", output):
        sys.exit("\nError: can not read input file: '%s'\n" % input)
    length = int(subprocess.check_output(['mincinfo', '-dimlength', 'vector_dimension', input]))
    return length

#----------------------------------------------------------------------
# top level program

if __name__ == '__main__':

    usage = """%s [options] input.mnc output.mnc
   or  %s --help
   
%s is a script for smoothing each component of a vector image
by spline approximation
""" % ((program_name, )*3)

    parser = OptionParser(usage)
    parser.add_option("--clobber", action="store_true", dest="clobber",
                       default=0, help="overwrite output file")
    parser.add_option("--mask", type="string", dest="mask", metavar="mask.mnc",
                      help="smooth values with specified mask region")
    parser.add_option("--distance", type="float", dest="distance",
                      metavar="distance", help="distance between knot points",
                      default=1.0)
    parser.add_option("--fwhm", type="float", dest="fwhm",
                      metavar="fwhm", help="full width at half maximum of gaussian blurring kernel")
    parser.add_option("--spline", action="store_const", const="spline",
                      dest="smoothing", default="spline",
                      help="Use spline approximation to smooth the data (default)")
    parser.add_option("--filter", action="store_const", const="filter",
                      dest="smoothing", 
                      help="Use a Gaussian filter to smooth the data")
    
    
    options, args = parser.parse_args()

    if len(args) == 2:
        input, output = args
    else:
        sys.exit(usage)

    if not options.clobber and os.path.exists(output):
        sys.exit("The --clobber option is needed to overwrite an existing file.")
    if options.smoothing == 'filter' and options.mask:
        sys.exit("The combination of --mask and --filter is not yet supported.")

    process_volume(input, output, options)

